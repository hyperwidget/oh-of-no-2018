{"version":3,"sources":["utils/readFile.js","days/day1/solution.js","days/day1/test.js","days/day1/index.js","days/day2/solution.js","days/day2/test.js","days/day2/index.js","days/day3/solution.js","days/day3/test.js","days/day3/index.js","days/day4/solution.js","days/day4/test.js","days/day4/index.js","days/day5/solution.js","days/day5/test.js","days/day5/index.js","days/day6/solution.js","days/day6/test.js","days/day6/index.js","days/index.js","runner.js"],"names":["readFile","day","dir","process","cwd","console","log","encoding","split","a","input","reduce","tally","inputVal","eval","b","inputs","frequencies","foundDuplicate","currentFrequency","index","length","expected","solutions","tests","double","triple","forEach","id","tracked","doubleUsed","tripleUsed","splitVal","val","Object","keys","key","splitValues","map","retVal","value","comparedAgainst","differences","i","slice","concat","join","grid","Array","fill","count","instruction","coords","replace","size","row","column","rowVal","parseInt","colVal","gridValue","overLapSize","createGuard","logs","totalAsleep","mostAsleepMinute","createFreshLog","getMostSleptMinute","minutes","hasOwnProperty","sleptMinutes","time","push","max","o","minute","dateFormat","getDate","moment","utc","format","sort","alog","aVal","Date","blog","bVal","guards","chosenGuard","currentGuard","lastMinute","dateVal","action","Number","isNaN","logId","setDate","guard","mostSleptMinute","answer","mostSleptMinuteCount","removeReactions","matchStart","letter","nextLetter","toLowerCase","toUpperCase","done","splitVals","startCount","lowest","toString","RegExp","calcMan","x1","x2","y1","y2","Math","abs","formattedInput","vals","maxSize","col","closest","closestInput","man","valueCounts","outerVals","cleanOuterVals","cleanOuterValsObject","cleanedVals","element","undefined","maxVal","maxDistance","totalMan","argv","part","command","dayCode","days","test","errMessage","result","pass","solution"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEO,MAAMA,QAAQ,GAAGC,GAAG,IAAI;AAC7B,QAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,EAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACA,SAAO,sBAAc,GAAEA,GAAI,SAAQD,GAAI,gBAAhC,EAAiD;AACtDM,IAAAA,QAAQ,EAAE;AAD4C,GAAjD,EAEJC,KAFI,CAEE,IAFF,CAAP;AAGD,CANM;;;eAQQR;;;;;;;;;eCVA;AACbS,EAAAA,CAAC,EAAEC,KAAK,IAAI;AACV,WAAOA,KAAK,CAACC,MAAN,CAAa,CAACC,KAAD,EAAQC,QAAR,KAAsBD,KAAK,IAAIE,IAAI,CAACD,QAAD,CAAhD,EAA6D,CAA7D,CAAP;AACD,GAHY;AAIbE,EAAAA,CAAC,EAAEC,MAAM,IAAI;AACX,QAAIC,WAAW,GAAG;AAAE,SAAG;AAAL,KAAlB;AACA,QAAIC,cAAc,GAAG,KAArB;AACA,QAAIC,gBAAgB,GAAG,CAAvB;;AAEA,WAAO,CAACD,cAAR,EAAwB;AACtB,WAAK,IAAIE,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGJ,MAAM,CAACK,MAAf,IAAyB,CAACH,cAA9C,EAA8DE,KAAK,EAAnE,EAAuE;AACrED,QAAAA,gBAAgB,IAAIL,IAAI,CAACE,MAAM,CAACI,KAAD,CAAP,CAAxB;;AAEA,YAAIH,WAAW,CAACE,gBAAD,CAAf,EAAmC;AACjCD,UAAAA,cAAc,GAAG,IAAjB;AACD,SAFD,MAEO;AACLD,UAAAA,WAAW,CAACE,gBAAD,CAAX,GAAgC,IAAhC;AACD;AACF;AACF;;AAED,WAAOA,gBAAP;AACD;AAtBY;;;;;;;;;eCAA;AACbV,EAAAA,CAAC,EAAE,CACD;AAAEC,IAAAA,KAAK,EAAE,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,CAAT;AAAmCY,IAAAA,QAAQ,EAAE;AAA7C,GADC,EAED;AAAEZ,IAAAA,KAAK,EAAE,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,CAAT;AAA6BY,IAAAA,QAAQ,EAAE;AAAvC,GAFC,EAGD;AAAEZ,IAAAA,KAAK,EAAE,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,CAAT;AAA6BY,IAAAA,QAAQ,EAAE,CAAC;AAAxC,GAHC,CADU;AAMbP,EAAAA,CAAC,EAAE,CACD;AAAEL,IAAAA,KAAK,EAAE,CAAE,IAAF,EAAQ,IAAR,CAAT;AAAuBY,IAAAA,QAAQ,EAAE;AAAjC,GADC,EAED;AAAEZ,IAAAA,KAAK,EAAE,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,EAA0B,IAA1B,CAAT;AAAyCY,IAAAA,QAAQ,EAAE;AAAnD,GAFC,EAGD;AAAEZ,IAAAA,KAAK,EAAE,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,EAA0B,IAA1B,CAAT;AAAyCY,IAAAA,QAAQ,EAAE;AAAnD,GAHC,EAID;AAAEZ,IAAAA,KAAK,EAAE,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,EAA0B,IAA1B,CAAT;AAAyCY,IAAAA,QAAQ,EAAE;AAAnD,GAJC;AANU;;;;;;;;;;ACAf;;AACA;;;;eAEe;AAAEC,EAAAA,SAAS,EAATA,iBAAF;AAAaC,EAAAA,KAAK,EAALA;AAAb;;;;;;;;;eCHA;AACbf,EAAAA,CAAC,EAAEC,KAAK,IAAI;AACV,QAAIe,MAAM,GAAG,CAAb;AACA,QAAIC,MAAM,GAAG,CAAb;AACAhB,IAAAA,KAAK,CAACiB,OAAN,CAAcC,EAAE,IAAI;AAClB,UAAIC,OAAO,GAAG,EAAd;AACA,UAAIC,UAAU,GAAG,KAAjB;AACA,UAAIC,UAAU,GAAG,KAAjB;AACA,YAAMC,QAAQ,GAAGJ,EAAE,CAACpB,KAAH,CAAS,EAAT,CAAjB;AAEAwB,MAAAA,QAAQ,CAACL,OAAT,CAAiBM,GAAG,IAAI;AACtB,YAAIJ,OAAO,CAACI,GAAD,CAAX,EAAkB;AAChBJ,UAAAA,OAAO,CAACI,GAAD,CAAP;AACD,SAFD,MAEO;AACLJ,UAAAA,OAAO,CAACI,GAAD,CAAP,GAAe,CAAf;AACD;AACF,OAND;AAQAC,MAAAA,MAAM,CAACC,IAAP,CAAYN,OAAZ,EAAqBF,OAArB,CAA6BS,GAAG,IAAI;AAClC,YAAI,CAACN,UAAD,IAAeD,OAAO,CAACO,GAAD,CAAP,KAAiB,CAApC,EAAuC;AACrCX,UAAAA,MAAM;AACNK,UAAAA,UAAU,GAAG,IAAb;AACD;;AAED,YAAI,CAACC,UAAD,IAAeF,OAAO,CAACO,GAAD,CAAP,KAAiB,CAApC,EAAuC;AACrCV,UAAAA,MAAM;AACNK,UAAAA,UAAU,GAAG,IAAb;AACD;AACF,OAVD;AAWD,KAzBD;AA0BA,WAAON,MAAM,GAAGC,MAAhB;AACD,GA/BY;AAgCbX,EAAAA,CAAC,EAAEL,KAAK,IAAI;AACV,UAAM2B,WAAW,GAAG3B,KAAK,CAAC4B,GAAN,CAAUL,GAAG,IAAIA,GAAG,CAACzB,KAAJ,CAAU,EAAV,CAAjB,CAApB;AACA,QAAI+B,MAAM,GAAG,IAAb;AAEAF,IAAAA,WAAW,CAACV,OAAZ,CAAoBa,KAAK,IAAI;AAC3BH,MAAAA,WAAW,CAACV,OAAZ,CAAoBc,eAAe,IAAI;AACrC,YAAIrB,KAAK,GAAG,CAAC,CAAb;AACA,YAAIsB,WAAW,GAAG,CAAlB;;AAEA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,eAAe,CAACpB,MAApB,IAA8BqB,WAAW,GAAG,CAA5D,EAA+DC,CAAC,EAAhE,EAAoE;AAClE,cAAIF,eAAe,CAACE,CAAD,CAAf,KAAuBH,KAAK,CAACG,CAAD,CAAhC,EAAqC;AACnCD,YAAAA,WAAW;AACXtB,YAAAA,KAAK,GAAGuB,CAAR;AACD;AACF;;AAED,YAAID,WAAW,KAAK,CAApB,EAAuB;AACrBH,UAAAA,MAAM,GAAGE,eAAe,CACrBG,KADM,CACA,CADA,EACGxB,KADH,EAENyB,MAFM,CAECJ,eAAe,CAACG,KAAhB,CAAsBxB,KAAK,GAAG,CAA9B,CAFD,EAGN0B,IAHM,CAGD,EAHC,CAAT;AAID;AACF,OAjBD;AAkBD,KAnBD;AAqBA,WAAOP,MAAP;AACD;AA1DY;;;;;;;;;eCAA;AACb9B,EAAAA,CAAC,EAAE,CACD;AACEC,IAAAA,KAAK,EAAE,CACL,QADK,EAEL,QAFK,EAGL,QAHK,EAIL,QAJK,EAKL,QALK,EAML,QANK,EAOL,QAPK,CADT;AAUEY,IAAAA,QAAQ,EAAE;AAVZ,GADC,CADU;AAebP,EAAAA,CAAC,EAAE,CACD;AACEL,IAAAA,KAAK,EAAE,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,EAAqC,OAArC,EAA8C,OAA9C,EAAuD,OAAvD,CADT;AAEEY,IAAAA,QAAQ,EAAE;AAFZ,GADC,EAKD;AACEZ,IAAAA,KAAK,EAAE,CACL,OADK,EAEL,aAFK,EAGL,OAHK,EAIL,OAJK,EAKL,aALK,EAML,OANK,EAOL,OAPK,CADT;AAUEY,IAAAA,QAAQ,EAAE;AAVZ,GALC;AAfU;;;;;;;;;;ACAf;;AACA;;;;eAEe;AAAEC,EAAAA,SAAS,EAATA,iBAAF;AAAaC,EAAAA,KAAK,EAALA;AAAb;;;;;;;;;eCHA;AACbf,EAAAA,CAAC,EAAEO,MAAM,IAAI;AACX;AACA,UAAM+B,IAAI,GAAGC,KAAK,CAAC,IAAD,CAAlB;;AACA,SAAK,IAAI5B,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG2B,IAAI,CAAC1B,MAAjC,EAAyCD,KAAK,EAA9C,EAAkD;AAChD2B,MAAAA,IAAI,CAAC3B,KAAD,CAAJ,GAAc4B,KAAK,CAAC,IAAD,CAAL,CAAYC,IAAZ,CAAiB,GAAjB,CAAd;AACD;;AACD,QAAIC,KAAK,GAAG,CAAZ;AACAH,IAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,GAAb,CAPW,CASX;;AACA/B,IAAAA,MAAM,CAACW,OAAP,CAAejB,KAAK,IAAI;AACtB,YAAMyC,WAAW,GAAGzC,KAAK,CAACF,KAAN,CAAY,GAAZ,CAApB;AACA,YAAM4C,MAAM,GAAGD,WAAW,CAAC,CAAD,CAAX,CAAeE,OAAf,CAAuB,GAAvB,EAA4B,EAA5B,EAAgC7C,KAAhC,CAAsC,GAAtC,CAAf;AACA,YAAM8C,IAAI,GAAGH,WAAW,CAAC,CAAD,CAAX,CAAe3C,KAAf,CAAqB,GAArB,CAAb,CAHsB,CAKtB;AACA;;AACA,WAAK,IAAI+C,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGD,IAAI,CAAC,CAAD,CAA5B,EAAiCC,GAAG,EAApC,EAAwC;AACtC,aAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGF,IAAI,CAAC,CAAD,CAAlC,EAAuCE,MAAM,EAA7C,EAAiD;AAC/C,gBAAMC,MAAM,GAAGC,QAAQ,CAACN,MAAM,CAAC,CAAD,CAAP,CAAR,GAAsBG,GAArC;AACA,gBAAMI,MAAM,GAAGD,QAAQ,CAACN,MAAM,CAAC,CAAD,CAAP,CAAR,GAAsBI,MAArC;AACA,gBAAMI,SAAS,GAAGb,IAAI,CAACU,MAAD,CAAJ,CAAaE,MAAb,CAAlB;;AAEA,cAAIC,SAAS,KAAK,GAAlB,EAAuB;AACrBb,YAAAA,IAAI,CAACU,MAAD,CAAJ,CAAaE,MAAb,IAAuB,CAAvB;AACD,WAFD,MAEO,IAAIC,SAAS,KAAK,CAAlB,EAAqB;AAC1Bb,YAAAA,IAAI,CAACU,MAAD,CAAJ,CAAaE,MAAb,IAAuB,GAAvB;AACAT,YAAAA,KAAK;AACN;AACF;AACF;AACF,KArBD,EAVW,CAiCX;;AACA,WAAOA,KAAP;AACD,GApCY;AAqCbnC,EAAAA,CAAC,EAAEC,MAAM,IAAI;AACX;AACA,UAAM+B,IAAI,GAAGC,KAAK,CAAC,IAAD,CAAlB;;AACA,SAAK,IAAI5B,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG2B,IAAI,CAAC1B,MAAjC,EAAyCD,KAAK,EAA9C,EAAkD;AAChD2B,MAAAA,IAAI,CAAC3B,KAAD,CAAJ,GAAc4B,KAAK,CAAC,IAAD,CAAL,CAAYC,IAAZ,CAAiB,GAAjB,CAAd;AACD;;AACD,QAAIV,MAAM,GAAG,IAAb;AACAQ,IAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,GAAb;AAEA/B,IAAAA,MAAM,CAACW,OAAP,CAAejB,KAAK,IAAI;AACtB,YAAMyC,WAAW,GAAGzC,KAAK,CAACF,KAAN,CAAY,GAAZ,CAApB;AACA,YAAM4C,MAAM,GAAGD,WAAW,CAAC,CAAD,CAAX,CAAeE,OAAf,CAAuB,GAAvB,EAA4B,EAA5B,EAAgC7C,KAAhC,CAAsC,GAAtC,CAAf;AACA,YAAM8C,IAAI,GAAGH,WAAW,CAAC,CAAD,CAAX,CAAe3C,KAAf,CAAqB,GAArB,CAAb;;AAEA,WAAK,IAAI+C,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGD,IAAI,CAAC,CAAD,CAA5B,EAAiCC,GAAG,EAApC,EAAwC;AACtC,aAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGF,IAAI,CAAC,CAAD,CAAlC,EAAuCE,MAAM,EAA7C,EAAiD;AAC/C,gBAAMC,MAAM,GAAGC,QAAQ,CAACN,MAAM,CAAC,CAAD,CAAP,CAAR,GAAsBG,GAArC;AACA,gBAAMI,MAAM,GAAGD,QAAQ,CAACN,MAAM,CAAC,CAAD,CAAP,CAAR,GAAsBI,MAArC;AACA,gBAAMI,SAAS,GAAGb,IAAI,CAACU,MAAD,CAAJ,CAAaE,MAAb,CAAlB;;AAEA,cAAIC,SAAS,KAAK,GAAlB,EAAuB;AACrBb,YAAAA,IAAI,CAACU,MAAD,CAAJ,CAAaE,MAAb,IAAuB,CAAvB;AACD,WAFD,MAEO,IAAIC,SAAS,KAAK,CAAlB,EAAqB;AAC1Bb,YAAAA,IAAI,CAACU,MAAD,CAAJ,CAAaE,MAAb,IAAuB,GAAvB;AACD;AACF;AACF;AACF,KAlBD,EATW,CA6BX;AACA;AACA;AACA;AACA;;AACA,SAAK,IAAIvC,KAAK,GAAGJ,MAAM,CAACK,MAAP,GAAgB,CAAjC,EAAoCD,KAAK,GAAG,CAA5C,EAA+CA,KAAK,EAApD,EAAwD;AACtD,YAAMV,KAAK,GAAGM,MAAM,CAACI,KAAD,CAApB;AACA,YAAM+B,WAAW,GAAGzC,KAAK,CAACF,KAAN,CAAY,GAAZ,CAApB;AACA,YAAM4C,MAAM,GAAGD,WAAW,CAAC,CAAD,CAAX,CAAeE,OAAf,CAAuB,GAAvB,EAA4B,EAA5B,EAAgC7C,KAAhC,CAAsC,GAAtC,CAAf;AACA,YAAM8C,IAAI,GAAGH,WAAW,CAAC,CAAD,CAAX,CAAe3C,KAAf,CAAqB,GAArB,CAAb;AACA,UAAIqD,WAAW,GAAG,CAAlB;;AAEA,WAAK,IAAIN,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGD,IAAI,CAAC,CAAD,CAA5B,EAAiCC,GAAG,EAApC,EAAwC;AACtC,aAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGF,IAAI,CAAC,CAAD,CAAlC,EAAuCE,MAAM,EAA7C,EAAiD;AAC/C,gBAAMC,MAAM,GAAGC,QAAQ,CAACN,MAAM,CAAC,CAAD,CAAP,CAAR,GAAsBG,GAArC;AACA,gBAAMI,MAAM,GAAGD,QAAQ,CAACN,MAAM,CAAC,CAAD,CAAP,CAAR,GAAsBI,MAArC;AACA,gBAAMI,SAAS,GAAGb,IAAI,CAACU,MAAD,CAAJ,CAAaE,MAAb,CAAlB;;AAEA,cAAIC,SAAS,KAAK,GAAlB,EAAuB;AACrBC,YAAAA,WAAW;AACZ;AACF;AACF;;AAED,UAAIA,WAAW,KAAK,CAApB,EAAuB;AACrBtB,QAAAA,MAAM,GAAGY,WAAW,CAAC,CAAD,CAApB;AACD;AACF;;AAED,WAAOZ,MAAP;AACD;AAhGY;;;;;;;;;eCAA;AACb9B,EAAAA,CAAC,EAAE,CACD;AAAEC,IAAAA,KAAK,EAAE,CAAE,eAAF,EAAmB,eAAnB,EAAoC,eAApC,CAAT;AAA8DY,IAAAA,QAAQ,EAAE;AAAxE,GADC,CADU;AAIbP,EAAAA,CAAC,EAAE,CACD;AAAEL,IAAAA,KAAK,EAAE,CAAT;AAAYY,IAAAA,QAAQ,EAAE;AAAtB,GADC,EAED;AAAEZ,IAAAA,KAAK,EAAE,CAAT;AAAYY,IAAAA,QAAQ,EAAE;AAAtB,GAFC,EAGD;AAAEZ,IAAAA,KAAK,EAAE,CAAT;AAAYY,IAAAA,QAAQ,EAAE;AAAtB,GAHC,EAID;AAAEZ,IAAAA,KAAK,EAAE,CAAT;AAAYY,IAAAA,QAAQ,EAAE;AAAtB,GAJC;AAJU;;;;;;;;;;ACAf;;AACA;;;;eAEe;AAAEC,EAAAA,SAAS,EAATA,iBAAF;AAAaC,EAAAA,KAAK,EAALA;AAAb;;;;;;;;;;ACHf;;AACA;;;;AAEA;AACA,MAAMsC,WAAW,GAAGlC,EAAE,IAAI;AACxB,SAAO;AACLA,IAAAA,EADK;AAELmC,IAAAA,IAAI,EAAE,EAFD;AAGLC,IAAAA,WAAW,EAAE,CAHR;AAILC,IAAAA,gBAAgB,EAAE;AAJb,GAAP;AAMD,CAPD,EASA;;;AACA,MAAMC,cAAc,GAAG,MAAM;AAC3B,SAAO,IAAIlB,KAAJ,CAAU,EAAV,EAAcC,IAAd,CAAmB,GAAnB,CAAP;AACD,CAFD,EAIA;AACA;;;AACA,MAAMkB,kBAAkB,GAAGJ,IAAI,IAAI;AACjC,MAAIK,OAAO,GAAG,EAAd;;AAEA,OAAK,MAAMhC,GAAX,IAAkB2B,IAAlB,EAAwB;AACtB,QAAIA,IAAI,CAACM,cAAL,CAAoBjC,GAApB,CAAJ,EAA8B;AAC5B,YAAM9B,GAAG,GAAGyD,IAAI,CAAC3B,GAAD,CAAhB;AACA,UAAIkC,YAAY,GAAG,EAAnB;;AACA,WAAK,IAAI3B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrC,GAAG,CAACe,MAAxB,EAAgCsB,CAAC,EAAjC,EAAqC;AACnC,cAAM4B,IAAI,GAAGjE,GAAG,CAACqC,CAAD,CAAhB;;AAEA,YAAI4B,IAAI,KAAK,GAAb,EAAkB;AAChBD,UAAAA,YAAY,CAACE,IAAb,CAAkB7B,CAAlB;AACD,SAFD,MAEO,CACN;AACF;;AACDyB,MAAAA,OAAO,CAACI,IAAR,CAAaF,YAAb;AACD;AACF;;AAED,QAAMpB,KAAK,GAAG,qBAAQ,qBAAQkB,OAAR,CAAR,CAAd;AAEA,QAAMK,GAAG,GAAG,mBAAMvC,MAAM,CAACC,IAAP,CAAYe,KAAZ,CAAN,EAA0BwB,CAAC,IAAIxB,KAAK,CAACwB,CAAD,CAApC,CAAZ;AAEA,SAAO;AAAExB,IAAAA,KAAK,EAAEA,KAAK,CAACuB,GAAD,CAAd;AAAqBE,IAAAA,MAAM,EAAEF;AAA7B,GAAP;AACD,CAxBD;;AA0BA,MAAMG,UAAU,GAAG,YAAnB;;AAEA,MAAMC,OAAO,GAAGnE,KAAK,IAAIoE,gBAAOC,GAAP,CAAWrE,KAAX,EAAkBsE,MAAlB,CAAyBJ,UAAzB,CAAzB;;eAEe;AACbnE,EAAAA,CAAC,EAAEO,MAAM,IAAI;AACX;AACAA,IAAAA,MAAM,CAACiE,IAAP,CAAY,CAACxE,CAAD,EAAIM,CAAJ,KAAU;AACpB,YAAMmE,IAAI,GAAGzE,CAAC,CAACD,KAAF,CAAQ,GAAR,CAAb;AACA,YAAM2E,IAAI,GAAG,IAAIC,IAAJ,CAASF,IAAI,CAAC,CAAD,CAAJ,CAAQ7B,OAAR,CAAgB,GAAhB,EAAqB,EAArB,CAAT,CAAb;AACA,YAAMgC,IAAI,GAAGtE,CAAC,CAACP,KAAF,CAAQ,GAAR,CAAb;AACA,YAAM8E,IAAI,GAAG,IAAIF,IAAJ,CAASC,IAAI,CAAC,CAAD,CAAJ,CAAQhC,OAAR,CAAgB,GAAhB,EAAqB,EAArB,CAAT,CAAb;;AAEA,UAAI8B,IAAI,GAAGG,IAAX,EAAiB;AACf,eAAO,CAAC,CAAR;AACD;;AACD,UAAIH,IAAI,GAAGG,IAAX,EAAiB;AACf,eAAO,CAAP;AACD;;AACD,aAAO,CAAP;AACD,KAbD;AAeA,UAAMC,MAAM,GAAG,EAAf;AACA,QAAIC,WAAW,GAAG,IAAlB;AACA,QAAIC,YAAY,GAAG,IAAnB;AACA,QAAIC,UAAU,GAAG,CAAjB,CApBW,CAsBX;;AACA1E,IAAAA,MAAM,CAACW,OAAP,CAAejB,KAAK,IAAI;AACtB,YAAMJ,GAAG,GAAGI,KAAK,CAACF,KAAN,CAAY,GAAZ,CAAZ;AACA,YAAMmF,OAAO,GAAG,IAAIP,IAAJ,CAAS9E,GAAG,CAAC,CAAD,CAAH,CAAO+C,OAAP,CAAe,GAAf,EAAoB,EAApB,CAAT,CAAhB;AACA,YAAMkB,IAAI,GAAGjE,GAAG,CAAC,CAAD,CAAH,CAAO+C,OAAP,CAAe,GAAf,EAAoB,EAApB,EAAwB7C,KAAxB,CAA8B,GAA9B,CAAb;AACA,YAAMoF,MAAM,GAAGtF,GAAG,CAAC,CAAD,CAAlB;AACA,YAAMsB,EAAE,GAAGtB,GAAG,CAAC,CAAD,CAAH,CAAO+C,OAAP,CAAe,GAAf,EAAoB,EAApB,CAAX,CALsB,CAOtB;;AACA,UAAIwC,MAAM,CAACC,KAAP,CAAapC,QAAQ,CAAC9B,EAAD,CAArB,CAAJ,EAAgC;AAC9B,cAAMmE,KAAK,GAAGlB,OAAO,CAACc,OAAD,CAArB,CAD8B,CAG9B;;AACA,YAAIC,MAAM,KAAK,OAAf,EAAwB;AACtBF,UAAAA,UAAU,GAAGnB,IAAI,CAAC,CAAD,CAAjB;AACD,SAFD,MAEO;AACL;AACA;AACA,eAAK,IAAI5B,CAAC,GAAG+C,UAAb,EAAyB/C,CAAC,GAAG4B,IAAI,CAAC,CAAD,CAAjC,EAAsC5B,CAAC,EAAvC,EAA2C;AACzC8C,YAAAA,YAAY,CAAC1B,IAAb,CAAkBgC,KAAlB,EAAyBpD,CAAzB,IAA8B,GAA9B;AACA8C,YAAAA,YAAY,CAACzB,WAAb;AACD;;AACD0B,UAAAA,UAAU,GAAGnB,IAAI,CAAC,CAAD,CAAjB;AACD;AACF,OAfD,MAeO;AACL;AACA,YAAI,CAACgB,MAAM,CAAC3D,EAAD,CAAX,EAAiB;AACf2D,UAAAA,MAAM,CAAC3D,EAAD,CAAN,GAAakC,WAAW,CAAClC,EAAD,CAAxB;AACD;;AAED6D,QAAAA,YAAY,GAAGF,MAAM,CAAC3D,EAAD,CAArB,CANK,CAQL;AACA;;AAEA,YAAI2C,IAAI,CAAC,CAAD,CAAJ,KAAY,IAAhB,EAAsB;AACpBoB,UAAAA,OAAO,CAACK,OAAR,CAAgBL,OAAO,CAACd,OAAR,KAAoB,CAApC;AACAY,UAAAA,YAAY,CAAC1B,IAAb,CAAkBc,OAAO,CAACc,OAAD,CAAzB,IAAsCzB,cAAc,EAApD;AACD,SAHD,MAGO;AACLuB,UAAAA,YAAY,CAAC1B,IAAb,CAAkBc,OAAO,CAACc,OAAD,CAAzB,IAAsCzB,cAAc,EAApD;AACD;;AACDwB,QAAAA,UAAU,GAAG,CAAb;AACD;AACF,KA1CD,EAvBW,CAmEX;;AACA,SAAK,MAAMtD,GAAX,IAAkBmD,MAAlB,EAA0B;AACxB,YAAMU,KAAK,GAAGV,MAAM,CAACnD,GAAD,CAApB;;AAEA,UAAI,CAACoD,WAAD,IAAgBS,KAAK,CAACjC,WAAN,GAAoBwB,WAAW,CAACxB,WAApD,EAAiE;AAC/DwB,QAAAA,WAAW,GAAGS,KAAd;AACD;AACF,KA1EU,CA4EX;;;AACA,UAAMC,eAAe,GAAG/B,kBAAkB,CAACqB,WAAW,CAACzB,IAAb,CAAlB,CAAqCY,MAA7D;AAEA,WAAOa,WAAW,CAAC5D,EAAZ,GAAiBsE,eAAxB;AACD,GAjFY;AAkFbnF,EAAAA,CAAC,EAAEC,MAAM,IAAI;AACX;AACAA,IAAAA,MAAM,CAACiE,IAAP,CAAY,CAACxE,CAAD,EAAIM,CAAJ,KAAU;AACpB,YAAMmE,IAAI,GAAGzE,CAAC,CAACD,KAAF,CAAQ,GAAR,CAAb;AACA,YAAM2E,IAAI,GAAG,IAAIC,IAAJ,CAASF,IAAI,CAAC,CAAD,CAAJ,CAAQ7B,OAAR,CAAgB,GAAhB,EAAqB,EAArB,CAAT,CAAb;AACA,YAAMgC,IAAI,GAAGtE,CAAC,CAACP,KAAF,CAAQ,GAAR,CAAb;AACA,YAAM8E,IAAI,GAAG,IAAIF,IAAJ,CAASC,IAAI,CAAC,CAAD,CAAJ,CAAQhC,OAAR,CAAgB,GAAhB,EAAqB,EAArB,CAAT,CAAb;;AAEA,UAAI8B,IAAI,GAAGG,IAAX,EAAiB;AACf,eAAO,CAAC,CAAR;AACD;;AACD,UAAIH,IAAI,GAAGG,IAAX,EAAiB;AACf,eAAO,CAAP;AACD;;AACD,aAAO,CAAP;AACD,KAbD;AAeA,UAAMC,MAAM,GAAG,EAAf;AACA,QAAIC,WAAW,GAAG,IAAlB;AACA,QAAIC,YAAY,GAAG,IAAnB;AACA,QAAIC,UAAU,GAAG,CAAjB;AAEA1E,IAAAA,MAAM,CAACW,OAAP,CAAejB,KAAK,IAAI;AACtB,YAAMJ,GAAG,GAAGI,KAAK,CAACF,KAAN,CAAY,GAAZ,CAAZ;AACA,YAAMmF,OAAO,GAAG,IAAIP,IAAJ,CAAS9E,GAAG,CAAC,CAAD,CAAH,CAAO+C,OAAP,CAAe,GAAf,EAAoB,EAApB,CAAT,CAAhB;AACA,YAAMkB,IAAI,GAAGjE,GAAG,CAAC,CAAD,CAAH,CAAO+C,OAAP,CAAe,GAAf,EAAoB,EAApB,EAAwB7C,KAAxB,CAA8B,GAA9B,CAAb;AACA,YAAMoF,MAAM,GAAGtF,GAAG,CAAC,CAAD,CAAlB;AACA,YAAMsB,EAAE,GAAGtB,GAAG,CAAC,CAAD,CAAH,CAAO+C,OAAP,CAAe,GAAf,EAAoB,EAApB,CAAX;;AAEA,UAAIwC,MAAM,CAACC,KAAP,CAAapC,QAAQ,CAAC9B,EAAD,CAArB,CAAJ,EAAgC;AAC9B,cAAMmE,KAAK,GAAGlB,OAAO,CAACc,OAAD,CAArB;;AACA,YAAIC,MAAM,KAAK,OAAf,EAAwB;AACtBF,UAAAA,UAAU,GAAGnB,IAAI,CAAC,CAAD,CAAjB;AACD,SAFD,MAEO;AACL;AACA,eAAK,IAAI5B,CAAC,GAAG+C,UAAb,EAAyB/C,CAAC,GAAG4B,IAAI,CAAC,CAAD,CAAjC,EAAsC5B,CAAC,EAAvC,EAA2C;AACzC8C,YAAAA,YAAY,CAAC1B,IAAb,CAAkBgC,KAAlB,EAAyBpD,CAAzB,IAA8B,GAA9B;AACA8C,YAAAA,YAAY,CAACzB,WAAb;AACD;;AACD0B,UAAAA,UAAU,GAAGnB,IAAI,CAAC,CAAD,CAAjB;AACD;AACF,OAZD,MAYO;AACL;AACA,YAAI,CAACgB,MAAM,CAAC3D,EAAD,CAAX,EAAiB;AACf2D,UAAAA,MAAM,CAAC3D,EAAD,CAAN,GAAakC,WAAW,CAAClC,EAAD,CAAxB;AACD;;AAED6D,QAAAA,YAAY,GAAGF,MAAM,CAAC3D,EAAD,CAArB;;AAEA,YAAI2C,IAAI,CAAC,CAAD,CAAJ,KAAY,IAAhB,EAAsB;AACpBoB,UAAAA,OAAO,CAACK,OAAR,CAAgBL,OAAO,CAACd,OAAR,KAAoB,CAApC;AACAY,UAAAA,YAAY,CAAC1B,IAAb,CAAkBc,OAAO,CAACc,OAAD,CAAzB,IAAsCzB,cAAc,EAApD;AACD,SAHD,MAGO;AACLuB,UAAAA,YAAY,CAAC1B,IAAb,CAAkBc,OAAO,CAACc,OAAD,CAAzB,IAAsCzB,cAAc,EAApD;AACD;;AACDwB,QAAAA,UAAU,GAAG,CAAb;AACD;AACF,KAnCD,EAtBW,CA2DX;;AACA,SAAK,MAAMtD,GAAX,IAAkBmD,MAAlB,EAA0B;AACxB,YAAMU,KAAK,GAAGV,MAAM,CAACnD,GAAD,CAApB;AACA,YAAM+D,MAAM,GAAGhC,kBAAkB,CAAC8B,KAAK,CAAClC,IAAP,CAAjC;AACAkC,MAAAA,KAAK,CAACC,eAAN,GAAwBC,MAAM,CAACxB,MAA/B;AACAsB,MAAAA,KAAK,CAACG,oBAAN,GAA6BD,MAAM,CAACjD,KAApC;AACD,KAjEU,CAmEX;;;AACA,SAAK,MAAMd,GAAX,IAAkBmD,MAAlB,EAA0B;AACxB,YAAMU,KAAK,GAAGV,MAAM,CAACnD,GAAD,CAApB;;AAEA,UACE,CAACoD,WAAD,IACAS,KAAK,CAACG,oBAAN,GAA6BZ,WAAW,CAACY,oBAF3C,EAGE;AACA,YAAIH,KAAK,CAACG,oBAAV,EAAgC;AAC9BZ,UAAAA,WAAW,GAAGS,KAAd;AACD;AACF;AACF;;AAED,WAAOT,WAAW,CAAC5D,EAAZ,GAAiB4D,WAAW,CAACU,eAApC;AACD;AApKY;;;;;;;;;eClDA;AACbzF,EAAAA,CAAC,EAAE,CACD;AACEC,IAAAA,KAAK,EAAE,CACJ,2CADI,EAEJ,iCAFI,EAGJ,6BAHI,EAIJ,iCAJI,EAKJ,6BALI,EAMJ,2CANI,EAOJ,iCAPI,EAQJ,6BARI,EASJ,2CATI,EAUJ,iCAVI,EAWJ,6BAXI,EAYJ,2CAZI,EAaJ,iCAbI,EAcJ,6BAdI,EAeJ,2CAfI,EAgBJ,iCAhBI,EAiBJ,6BAjBI,CADT;AAoBEY,IAAAA,QAAQ,EAAE;AApBZ,GADC,CADU;AAyBbP,EAAAA,CAAC,EAAE,CACD;AACEL,IAAAA,KAAK,EAAE,CACJ,2CADI,EAEJ,iCAFI,EAGJ,6BAHI,EAIJ,iCAJI,EAKJ,6BALI,EAMJ,2CANI,EAOJ,iCAPI,EAQJ,6BARI,EASJ,2CATI,EAUJ,iCAVI,EAWJ,6BAXI,EAYJ,2CAZI,EAaJ,iCAbI,EAcJ,6BAdI,EAeJ,2CAfI,EAgBJ,iCAhBI,EAiBJ,6BAjBI,CADT;AAoBEY,IAAAA,QAAQ,EAAE;AApBZ,GADC;AAzBU;;;;;;;;;;ACAf;;AACA;;;;eAEe;AAAEC,EAAAA,SAAS,EAATA,iBAAF;AAAaC,EAAAA,KAAK,EAALA;AAAb;;;;;;;;;;ACHf,MAAM6E,eAAe,GAAG3F,KAAK,IAAI;AAC/B,MAAI4F,UAAU,GAAG,KAAjB,CAD+B,CAE/B;AACA;;AAEA,OAAK,IAAI3D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjC,KAAK,CAACW,MAAN,GAAe,CAAnB,IAAwBiF,UAAU,KAAK,KAAvD,EAA8D3D,CAAC,EAA/D,EAAmE;AACjE,UAAM4D,MAAM,GAAG7F,KAAK,CAACiC,CAAD,CAApB;AACA,UAAM6D,UAAU,GAAG9F,KAAK,CAACiC,CAAC,GAAG,CAAL,CAAxB;;AACA,QACG4D,MAAM,KAAKA,MAAM,CAACE,WAAP,EAAX,IACCF,MAAM,CAACG,WAAP,OAAyBF,UAD3B,IAECD,MAAM,KAAKA,MAAM,CAACG,WAAP,EAAX,IAAmCH,MAAM,CAACE,WAAP,OAAyBD,UAH/D,EAIE;AACAF,MAAAA,UAAU,GAAG3D,CAAb;AACA;AACD;AACF;;AAED,MAAI2D,UAAU,KAAK,KAAnB,EAA0B;AACxB,WAAO5F,KAAK,CAACkC,KAAN,CAAY,CAAZ,EAAe0D,UAAf,EAA2BzD,MAA3B,CAAkCnC,KAAK,CAACkC,KAAN,CAAY0D,UAAU,GAAG,CAAzB,CAAlC,CAAP;AACD,GAFD,MAEO;AACL,WAAO5F,KAAP;AACD;AACF,CAvBD;;eAyBe;AACbD,EAAAA,CAAC,EAAEO,MAAM,IAAI;AACX,UAAMN,KAAK,GAAGM,MAAM,CAAC,CAAD,CAApB;AAEA,QAAI2F,IAAI,GAAG,KAAX;AACA,QAAIC,SAAS,GAAGlG,KAAK,CAACF,KAAN,CAAY,EAAZ,CAAhB,CAJW,CAMX;;AACA,WAAO,CAACmG,IAAR,EAAc;AACZ,YAAME,UAAU,GAAGD,SAAS,CAACvF,MAA7B;AAEAuF,MAAAA,SAAS,GAAGP,eAAe,CAACO,SAAD,CAA3B,CAHY,CAKZ;;AACA,UAAIC,UAAU,KAAKD,SAAS,CAACvF,MAA7B,EAAqC;AACnCsF,QAAAA,IAAI,GAAG,IAAP;AACD;AACF;;AAED,WAAOC,SAAS,CAACvF,MAAjB;AACD,GApBY;AAqBbN,EAAAA,CAAC,EAAEC,MAAM,IAAI;AACX,UAAMN,KAAK,GAAGM,MAAM,CAAC,CAAD,CAApB;AAEA,QAAI8F,MAAM,GAAG,KAAb,CAHW,CAIX;AACA;;AACA,SAAK,IAAInE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAIgE,IAAI,GAAG,KAAX;AACA,YAAMJ,MAAM,GAAG,CAAC5D,CAAC,GAAG,EAAL,EAASoE,QAAT,CAAkB,EAAlB,CAAf;AACA,UAAIH,SAAS,GAAGlG,KAAK,CAClB2C,OADa,CACL,IAAI2D,MAAJ,CAAWT,MAAX,EAAmB,GAAnB,CADK,EACoB,EADpB,EAEblD,OAFa,CAEL,IAAI2D,MAAJ,CAAWT,MAAM,CAACG,WAAP,EAAX,EAAiC,GAAjC,CAFK,EAEkC,EAFlC,EAGblG,KAHa,CAGP,EAHO,CAAhB;;AAKA,aAAO,CAACmG,IAAR,EAAc;AACZ,cAAME,UAAU,GAAGD,SAAS,CAACvF,MAA7B;AAEAuF,QAAAA,SAAS,GAAGP,eAAe,CAACO,SAAD,CAA3B,CAHY,CAKZ;;AACA,YAAIC,UAAU,KAAKD,SAAS,CAACvF,MAA7B,EAAqC;AACnCsF,UAAAA,IAAI,GAAG,IAAP;AACD;AACF;;AAED,UAAIG,MAAM,KAAK,KAAX,IAAoBF,SAAS,CAACvF,MAAV,GAAmByF,MAA3C,EAAmD;AACjDA,QAAAA,MAAM,GAAGF,SAAS,CAACvF,MAAnB;AACD;AACF;;AAED,WAAOyF,MAAP;AACD;AApDY;;;;;;;;;eCzBA;AACbrG,EAAAA,CAAC,EAAE,CACD;AAAEC,IAAAA,KAAK,EAAE,CAAE,kBAAF,CAAT;AAA+BY,IAAAA,QAAQ,EAAE;AAAzC,GADC,EAED;AAAEZ,IAAAA,KAAK,EAAE,CAAE,kBAAF,CAAT;AAA+BY,IAAAA,QAAQ,EAAE;AAAzC,GAFC,EAGD;AAAEZ,IAAAA,KAAK,EAAE,CAAE,kBAAF,CAAT;AAA+BY,IAAAA,QAAQ,EAAE;AAAzC,GAHC,CADU;AAMbP,EAAAA,CAAC,EAAE,CACD;AAAEL,IAAAA,KAAK,EAAE,CAAE,kBAAF,CAAT;AAA+BY,IAAAA,QAAQ,EAAE;AAAzC,GADC,EAED;AAAEZ,IAAAA,KAAK,EAAE,CAAE,kBAAF,CAAT;AAA+BY,IAAAA,QAAQ,EAAE;AAAzC,GAFC,EAGD;AAAEZ,IAAAA,KAAK,EAAE,CAAE,kBAAF,CAAT;AAA+BY,IAAAA,QAAQ,EAAE;AAAzC,GAHC;AANU;;;;;;;;;;ACAf;;AACA;;;;eAEe;AAAEC,EAAAA,SAAS,EAATA,iBAAF;AAAaC,EAAAA,KAAK,EAALA;AAAb;;;;;;;;;;ACHf;;AAEA,MAAMyF,OAAO,GAAG,CAACC,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,KAAoBC,IAAI,CAACC,GAAL,CAASL,EAAE,GAAGC,EAAd,IAAoBG,IAAI,CAACC,GAAL,CAASH,EAAE,GAAGC,EAAd,CAAxD;;eAEe;AACb5G,EAAAA,CAAC,EAAEO,MAAM,IAAI;AACX,UAAMwG,cAAc,GAAGxG,MAAM,CAACsB,GAAP,CAAW5B,KAAK,IAAI;AACzC,YAAM+G,IAAI,GAAG/G,KAAK,CAACF,KAAN,CAAY,GAAZ,CAAb;AACA,aAAO,CAACkD,QAAQ,CAAC+D,IAAI,CAAC,CAAD,CAAL,CAAT,EAAoB/D,QAAQ,CAAC+D,IAAI,CAAC,CAAD,CAAL,CAA5B,CAAP;AACD,KAHsB,CAAvB,CADW,CAMX;;AACA,QAAIC,OAAO,GAAG,iBAAI,yBAAYF,cAAZ,CAAJ,IAAmC,CAAjD,CAPW,CASX;;AACA,UAAMzE,IAAI,GAAGC,KAAK,CAAC0E,OAAD,CAAlB;;AACA,SAAK,IAAI/E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,IAAI,CAAC1B,MAAzB,EAAiCsB,CAAC,EAAlC,EAAsC;AACpCI,MAAAA,IAAI,CAACJ,CAAD,CAAJ,GAAUK,KAAK,CAAC0E,OAAD,CAAf;AACD,KAbU,CAeX;;;AACA,SAAK,IAAI/E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6E,cAAc,CAACnG,MAAnC,EAA2CsB,CAAC,EAA5C,EAAgD;AAC9C,YAAMjC,KAAK,GAAG8G,cAAc,CAAC7E,CAAD,CAA5B;AACAI,MAAAA,IAAI,CAACrC,KAAK,CAAC,CAAD,CAAN,CAAJ,CAAeA,KAAK,CAAC,CAAD,CAApB,IAA2BiC,CAAC,GAAG,CAAJ,GAAQ,GAAnC;AACD,KAnBU,CAqBX;;;AACA,SAAK,IAAIY,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGmE,OAAxB,EAAiCnE,GAAG,EAApC,EAAwC;AACtC,WAAK,IAAIoE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGD,OAAxB,EAAiCC,GAAG,EAApC,EAAwC;AACtC;AACA,YAAI,CAAC5E,IAAI,CAACQ,GAAD,CAAJ,CAAUoE,GAAV,CAAL,EAAqB;AACnB;AACA,cAAIC,OAAO,GAAGF,OAAd;AACA,cAAIG,YAAY,GAAG,CAAC,CAApB,CAHmB,CAInB;;AAEA,eAAK,IAAIlF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6E,cAAc,CAACnG,MAAnC,EAA2CsB,CAAC,EAA5C,EAAgD;AAC9C,kBAAMmF,GAAG,GAAGb,OAAO,CACjB1D,GADiB,EAEjBiE,cAAc,CAAC7E,CAAD,CAAd,CAAkB,CAAlB,CAFiB,EAGjBgF,GAHiB,EAIjBH,cAAc,CAAC7E,CAAD,CAAd,CAAkB,CAAlB,CAJiB,CAAnB;;AAMA,gBAAImF,GAAG,GAAGF,OAAV,EAAmB;AACjBA,cAAAA,OAAO,GAAGE,GAAV;AACAD,cAAAA,YAAY,GAAGlF,CAAC,GAAG,CAAnB;AACD,aAHD,CAKA;AALA,iBAMK,IAAImF,GAAG,KAAKF,OAAZ,EAAqB;AACxBC,gBAAAA,YAAY,GAAG,GAAf;AACD;AACF;;AACD9E,UAAAA,IAAI,CAACQ,GAAD,CAAJ,CAAUoE,GAAV,IAAiBE,YAAjB;AACD;AACF;AACF,KAnDU,CAqDX;;;AACA,UAAME,WAAW,GAAG,qBAAQ,yBAAYhF,IAAZ,CAAR,CAApB,CAtDW,CAwDX;;AACA,UAAMiF,SAAS,GAAG,EAAlB;;AACA,SAAK,IAAIL,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGD,OAAxB,EAAiCC,GAAG,EAApC,EAAwC;AACtCK,MAAAA,SAAS,CAACxD,IAAV,CAAezB,IAAI,CAAC,CAAD,CAAJ,CAAQ4E,GAAR,CAAf;AACD;;AACD,SAAK,IAAIA,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGD,OAAxB,EAAiCC,GAAG,EAApC,EAAwC;AACtCK,MAAAA,SAAS,CAACxD,IAAV,CAAezB,IAAI,CAAC2E,OAAO,GAAG,CAAX,CAAJ,CAAkBC,GAAlB,CAAf;AACD;;AACD,SAAK,IAAIpE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGmE,OAAxB,EAAiCnE,GAAG,EAApC,EAAwC;AACtCyE,MAAAA,SAAS,CAACxD,IAAV,CAAezB,IAAI,CAACQ,GAAD,CAAJ,CAAU,CAAV,CAAf;AACD;;AACD,SAAK,IAAIA,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGmE,OAAxB,EAAiCnE,GAAG,EAApC,EAAwC;AACtCyE,MAAAA,SAAS,CAACxD,IAAV,CAAezB,IAAI,CAACQ,GAAD,CAAJ,CAAUmE,OAAO,GAAG,CAApB,CAAf;AACD;;AAED,UAAMO,cAAc,GAAG,kBAAKD,SAAL,CAAvB;AACA,UAAME,oBAAoB,GAAG,EAA7B;;AAEA,SAAK,IAAIvF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsF,cAAc,CAAC5G,MAAnC,EAA2CsB,CAAC,EAA5C,EAAgD;AAC9CuF,MAAAA,oBAAoB,CAACD,cAAc,CAACtF,CAAD,CAAf,CAApB,GAA0C,CAA1C;AACD;;AAED,UAAMwF,WAAW,GAAG,EAApB,CA9EW,CA+EX;AAEA;;AACA,SAAK,MAAM/F,GAAX,IAAkB2F,WAAlB,EAA+B;AAC7B,UAAIA,WAAW,CAAC1D,cAAZ,CAA2BjC,GAA3B,CAAJ,EAAqC;AACnC,cAAMgG,OAAO,GAAGL,WAAW,CAAC3F,GAAD,CAA3B;;AACA,YAAI8F,oBAAoB,CAAC9F,GAAD,CAApB,KAA8BiG,SAAlC,EAA6C;AAC3CF,UAAAA,WAAW,CAAC/F,GAAD,CAAX,GAAmBgG,OAAnB;AACD;AACF;AACF;;AAED,UAAME,MAAM,GAAG,mBAAMpG,MAAM,CAACC,IAAP,CAAYgG,WAAZ,CAAN,EAAgCzD,CAAC,IAAIyD,WAAW,CAACzD,CAAD,CAAhD,CAAf;AAEA,WAAOyD,WAAW,CAACG,MAAD,CAAX,GAAsB,CAA7B;AACD,GA/FY;AAgGbvH,EAAAA,CAAC,EAAEC,MAAM,IAAI;AACX,QAAIuH,WAAW,GAAG,CAAlB;AACA,UAAMf,cAAc,GAAGxG,MAAM,CAACsB,GAAP,CAAW5B,KAAK,IAAI;AACzC,YAAM+G,IAAI,GAAG/G,KAAK,CAACF,KAAN,CAAY,GAAZ,CAAb;AACA,aAAO,CAACkD,QAAQ,CAAC+D,IAAI,CAAC,CAAD,CAAL,CAAT,EAAoB/D,QAAQ,CAAC+D,IAAI,CAAC,CAAD,CAAL,CAA5B,CAAP;AACD,KAHsB,CAAvB;;AAKA,QAAID,cAAc,CAACnG,MAAf,KAA0B,CAA9B,EAAiC;AAC/BkH,MAAAA,WAAW,GAAG,EAAd;AACD,KAFD,MAEO;AACLA,MAAAA,WAAW,GAAG,KAAd;AACD,KAXU,CAaX;;;AACA,QAAIb,OAAO,GAAG,iBAAI,yBAAYF,cAAZ,CAAJ,IAAmC,CAAjD,CAdW,CAgBX;;AACA,UAAMzE,IAAI,GAAGC,KAAK,CAAC0E,OAAD,CAAlB;;AACA,SAAK,IAAI/E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,IAAI,CAAC1B,MAAzB,EAAiCsB,CAAC,EAAlC,EAAsC;AACpCI,MAAAA,IAAI,CAACJ,CAAD,CAAJ,GAAUK,KAAK,CAAC0E,OAAD,CAAf;AACD,KApBU,CAsBX;;;AACA,SAAK,IAAI/E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6E,cAAc,CAACnG,MAAnC,EAA2CsB,CAAC,EAA5C,EAAgD;AAC9C,YAAMjC,KAAK,GAAG8G,cAAc,CAAC7E,CAAD,CAA5B;AACAI,MAAAA,IAAI,CAACrC,KAAK,CAAC,CAAD,CAAN,CAAJ,CAAeA,KAAK,CAAC,CAAD,CAApB,IAA2BiC,CAAC,GAAG,CAAJ,GAAQ,GAAnC;AACD,KA1BU,CA4BX;;;AACA,SAAK,IAAIY,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGmE,OAAxB,EAAiCnE,GAAG,EAApC,EAAwC;AACtC,WAAK,IAAIoE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGD,OAAxB,EAAiCC,GAAG,EAApC,EAAwC;AACtC;AACA;AACA,YAAIa,QAAQ,GAAG,CAAf;AACA,YAAIX,YAAY,GAAG,CAAC,CAApB,CAJsC,CAKtC;;AACA,aAAK,IAAIlF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6E,cAAc,CAACnG,MAAnC,EAA2CsB,CAAC,EAA5C,EAAgD;AAC9C,gBAAMmF,GAAG,GAAGb,OAAO,CACjB1D,GADiB,EAEjBiE,cAAc,CAAC7E,CAAD,CAAd,CAAkB,CAAlB,CAFiB,EAGjBgF,GAHiB,EAIjBH,cAAc,CAAC7E,CAAD,CAAd,CAAkB,CAAlB,CAJiB,CAAnB;AAMA6F,UAAAA,QAAQ,IAAIV,GAAZ;AACD,SAdqC,CAgBtC;;;AACA,YAAIU,QAAQ,GAAGD,WAAf,EAA4B;AAC1BxF,UAAAA,IAAI,CAACQ,GAAD,CAAJ,CAAUoE,GAAV,IAAiB,GAAjB;AACD,SAFD,MAEO;AACL5E,UAAAA,IAAI,CAACQ,GAAD,CAAJ,CAAUoE,GAAV,IAAiB,GAAjB;AACD;AACF;AACF,KArDU,CAuDX;;;AACA,WAAO,qBAAQ,yBAAY5E,IAAZ,CAAR,EAA2B,GAA3B,CAAP;AACD;AAzJY;;;;;;;;;eCJA;AACbtC,EAAAA,CAAC,EAAE,CACD;AAAEC,IAAAA,KAAK,EAAE,CAAE,MAAF,EAAU,MAAV,EAAkB,MAAlB,EAA0B,MAA1B,EAAkC,MAAlC,EAA0C,MAA1C,CAAT;AAA2DY,IAAAA,QAAQ,EAAE;AAArE,GADC,CADU;AAIbP,EAAAA,CAAC,EAAE,CAAC;AAAEL,IAAAA,KAAK,EAAE,CAAE,MAAF,EAAU,MAAV,EAAkB,MAAlB,EAA0B,MAA1B,EAAkC,MAAlC,EAA0C,MAA1C,CAAT;AAA2DY,IAAAA,QAAQ,EAAE;AAArE,GAAD;AAJU;;;;;;;;;;ACAf;;AACA;;;;eAEe;AAAEC,EAAAA,SAAS,EAATA,iBAAF;AAAaC,EAAAA,KAAK,EAALA;AAAb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHf;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;ACLA;;AACA;;;;AAEA,MAAMvB,GAAG,GAAGE,OAAO,CAACsI,IAAR,CAAa,CAAb,CAAZ;AACA,MAAMC,IAAI,GAAGvI,OAAO,CAACsI,IAAR,CAAa,CAAb,CAAb;AACA,MAAME,OAAO,GAAGxI,OAAO,CAACsI,IAAR,CAAa,CAAb,CAAhB;AACA,MAAMG,OAAO,GAAGC,IAAI,CAAC5I,GAAD,CAApB;AAEAI,OAAO,CAACC,GAAR,CAAa,WAAUL,GAAI,IAAGyI,IAAK,IAAGC,OAAQ,EAA9C;;AAEA,IAAIA,OAAO,KAAK,MAAhB,EAAwB;AACtBC,EAAAA,OAAO,CAACpH,KAAR,CAAckH,IAAd,EAAoB/G,OAApB,CAA4B,CAACmH,IAAD,EAAO1H,KAAP,KAAiB;AAC3C,QAAI2H,UAAU,GAAG,EAAjB;AACA,UAAMC,MAAM,GAAGJ,OAAO,CAACrH,SAAR,CAAkBmH,IAAlB,EAAwBI,IAAI,CAACpI,KAA7B,CAAf;AACA,UAAMY,QAAQ,GAAGwH,IAAI,CAACxH,QAAtB;AACA,UAAM2H,IAAI,GAAGD,MAAM,KAAK1H,QAAxB;;AACA,QAAI,CAAC2H,IAAL,EAAW;AACTF,MAAAA,UAAU,GAAI,aAAYzH,QAAS,SAAQ0H,MAAO,EAAlD;AACD;;AAED3I,IAAAA,OAAO,CAACC,GAAR,CAAa,QAAOc,KAAK,GAAG,CAAE,KAAI6H,IAAI,GAAG,OAAH,GAAa,OAAQ,IAAGF,UAAW,EAAzE;AACD,GAVD;AAWD,CAZD,MAYO,IAAIJ,OAAO,KAAK,SAAhB,EAA2B;AAChC,QAAMO,QAAQ,GAAGN,OAAO,CAACrH,SAAR,CAAkBmH,IAAlB,CAAjB;AACA,QAAMM,MAAM,GAAGE,QAAQ,CAAC,wBAASjJ,GAAT,CAAD,CAAvB;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAa,WAAU0I,MAAO,EAA9B;AACD","file":"runner.map","sourceRoot":"..","sourcesContent":["import { readFileSync } from 'fs'\n\nexport const readFile = day => {\n  const dir = process.cwd()\n  console.log(dir)\n  return readFileSync(`${dir}/days/${day}/inputFile.txt`, {\n    encoding: 'utf8'\n  }).split('\\n')\n}\n\nexport default readFile\n","export default {\n  a: input => {\n    return input.reduce((tally, inputVal) => (tally += eval(inputVal)), 0)\n  },\n  b: inputs => {\n    let frequencies = { 0: true }\n    let foundDuplicate = false\n    let currentFrequency = 0\n\n    while (!foundDuplicate) {\n      for (let index = 0; index < inputs.length && !foundDuplicate; index++) {\n        currentFrequency += eval(inputs[index])\n\n        if (frequencies[currentFrequency]) {\n          foundDuplicate = true\n        } else {\n          frequencies[currentFrequency] = true\n        }\n      }\n    }\n\n    return currentFrequency\n  }\n}\n","export default {\n  a: [\n    { input: [`+1`, `-2`, `+3`, `+1`], expected: 3 },\n    { input: [`+1`, `+1`, `-2`], expected: 0 },\n    { input: [`-1`, `-2`, `-3`], expected: -6 }\n  ],\n  b: [\n    { input: [`+1`, `-1`], expected: 0 },\n    { input: [`+3`, `+3`, `+4`, `-2`, `-4`], expected: 10 },\n    { input: [`-6`, `+3`, `+8`, `+5`, `-6`], expected: 5 },\n    { input: [`+7`, `+7`, `-2`, `-7`, `-4`], expected: 14 }\n  ]\n}\n","import { default as solutions } from './solution'\nimport { default as tests } from './test'\n\nexport default { solutions, tests }\n","export default {\n  a: input => {\n    let double = 0\n    let triple = 0\n    input.forEach(id => {\n      let tracked = {}\n      let doubleUsed = false\n      let tripleUsed = false\n      const splitVal = id.split('')\n\n      splitVal.forEach(val => {\n        if (tracked[val]) {\n          tracked[val]++\n        } else {\n          tracked[val] = 1\n        }\n      })\n\n      Object.keys(tracked).forEach(key => {\n        if (!doubleUsed && tracked[key] === 2) {\n          double++\n          doubleUsed = true\n        }\n\n        if (!tripleUsed && tracked[key] === 3) {\n          triple++\n          tripleUsed = true\n        }\n      })\n    })\n    return double * triple\n  },\n  b: input => {\n    const splitValues = input.map(val => val.split(''))\n    let retVal = null\n\n    splitValues.forEach(value => {\n      splitValues.forEach(comparedAgainst => {\n        let index = -1\n        let differences = 0\n\n        for (let i = 0; i < comparedAgainst.length && differences < 2; i++) {\n          if (comparedAgainst[i] !== value[i]) {\n            differences++\n            index = i\n          }\n        }\n\n        if (differences === 1) {\n          retVal = comparedAgainst\n            .slice(0, index)\n            .concat(comparedAgainst.slice(index + 1))\n            .join('')\n        }\n      })\n    })\n\n    return retVal\n  }\n}\n","export default {\n  a: [\n    {\n      input: [\n        'abcdef',\n        'bababc',\n        'abbcde',\n        'abcccd',\n        'aabcdd',\n        'abcdee',\n        'ababab'\n      ],\n      expected: 12\n    }\n  ],\n  b: [\n    {\n      input: ['abcde', 'fghij', 'klmno', 'pqrst', 'fguij', 'axcye', 'wvxyz'],\n      expected: 'fgij'\n    },\n    {\n      input: [\n        'abcde',\n        'fghijasdfac',\n        'klmno',\n        'pqrst',\n        'fghijusdfac',\n        'axcye',\n        'wvxyz'\n      ],\n      expected: 'fghijsdfac'\n    }\n  ]\n}\n","import { default as solutions } from './solution'\nimport { default as tests } from './test'\n\nexport default { solutions, tests }\n","export default {\n  a: inputs => {\n    // Literally make a grid of 1000*1000 and fill it with dots\n    const grid = Array(1000)\n    for (let index = 0; index < grid.length; index++) {\n      grid[index] = Array(1000).fill('.')\n    }\n    let count = 0\n    grid[1][1] = 'x'\n\n    // For every instruction, parse out into bits that are needed\n    inputs.forEach(input => {\n      const instruction = input.split(' ')\n      const coords = instruction[2].replace(':', '').split(',')\n      const size = instruction[3].split('x')\n\n      // Loop through each instruction and add a `1` in every square that should be placed\n      // If an overlap happens, put an x and increase the count of overlaps\n      for (let row = 0; row < size[0]; row++) {\n        for (let column = 0; column < size[1]; column++) {\n          const rowVal = parseInt(coords[0]) + row\n          const colVal = parseInt(coords[1]) + column\n          const gridValue = grid[rowVal][colVal]\n\n          if (gridValue === '.') {\n            grid[rowVal][colVal] = 1\n          } else if (gridValue === 1) {\n            grid[rowVal][colVal] = 'x'\n            count++\n          }\n        }\n      }\n    })\n\n    // Return overlaps\n    return count\n  },\n  b: inputs => {\n    // All this is exactly the same as part a\n    const grid = Array(1000)\n    for (let index = 0; index < grid.length; index++) {\n      grid[index] = Array(1000).fill('.')\n    }\n    let retVal = null\n    grid[1][1] = 'x'\n\n    inputs.forEach(input => {\n      const instruction = input.split(' ')\n      const coords = instruction[2].replace(':', '').split(',')\n      const size = instruction[3].split('x')\n\n      for (let row = 0; row < size[0]; row++) {\n        for (let column = 0; column < size[1]; column++) {\n          const rowVal = parseInt(coords[0]) + row\n          const colVal = parseInt(coords[1]) + column\n          const gridValue = grid[rowVal][colVal]\n\n          if (gridValue === '.') {\n            grid[rowVal][colVal] = 1\n          } else if (gridValue === 1) {\n            grid[rowVal][colVal] = 'x'\n          }\n        }\n      }\n    })\n\n    // _THIS_ is just genious /s\n    // This loops through all the instructions _backwards_ after having already\n    // gone through the instructions in the original order\n    // that way I don't need to worry about whether or not a future instruction\n    // doesn't overlap with this one, because all the future instructions have been run already\n    for (let index = inputs.length - 1; index > 0; index--) {\n      const input = inputs[index]\n      const instruction = input.split(' ')\n      const coords = instruction[2].replace(':', '').split(',')\n      const size = instruction[3].split('x')\n      let overLapSize = 0\n\n      for (let row = 0; row < size[0]; row++) {\n        for (let column = 0; column < size[1]; column++) {\n          const rowVal = parseInt(coords[0]) + row\n          const colVal = parseInt(coords[1]) + column\n          const gridValue = grid[rowVal][colVal]\n\n          if (gridValue === 'x') {\n            overLapSize++\n          }\n        }\n      }\n\n      if (overLapSize === 0) {\n        retVal = instruction[0]\n      }\n    }\n\n    return retVal\n  }\n}\n","export default {\n  a: [\n    { input: [`#1 @ 1,3: 4x4`, `#2 @ 3,1: 4x4`, `#3 @ 5,5: 2x2`], expected: 4 }\n  ],\n  b: [\n    { input: 1, expected: 1 },\n    { input: 1, expected: 1 },\n    { input: 1, expected: 1 },\n    { input: 1, expected: 1 }\n  ]\n}\n","import { default as solutions } from './solution'\nimport { default as tests } from './test'\n\nexport default { solutions, tests }\n","import moment, { min } from 'moment'\nimport { flatten, countBy, maxBy } from 'lodash'\n\n// Just a default guard object witht the structure I want\nconst createGuard = id => {\n  return {\n    id,\n    logs: {},\n    totalAsleep: 0,\n    mostAsleepMinute: 0\n  }\n}\n\n// A fresh array with no minutes slept in\nconst createFreshLog = () => {\n  return new Array(60).fill('.')\n}\n\n// Loops through the logs provided, compares them and finds the minute\n// that occurs in the logs the most, returns a count and the minute itself\nconst getMostSleptMinute = logs => {\n  let minutes = []\n\n  for (const key in logs) {\n    if (logs.hasOwnProperty(key)) {\n      const log = logs[key]\n      let sleptMinutes = []\n      for (let i = 0; i < log.length; i++) {\n        const time = log[i]\n\n        if (time !== '.') {\n          sleptMinutes.push(i)\n        } else {\n        }\n      }\n      minutes.push(sleptMinutes)\n    }\n  }\n\n  const count = countBy(flatten(minutes))\n\n  const max = maxBy(Object.keys(count), o => count[o])\n\n  return { count: count[max], minute: max }\n}\n\nconst dateFormat = 'YYYY-MM-DD'\n\nconst getDate = input => moment.utc(input).format(dateFormat)\n\nexport default {\n  a: inputs => {\n    // SORT INPUT\n    inputs.sort((a, b) => {\n      const alog = a.split(']')\n      const aVal = new Date(alog[0].replace('[', ''))\n      const blog = b.split(']')\n      const bVal = new Date(blog[0].replace('[', ''))\n\n      if (aVal < bVal) {\n        return -1\n      }\n      if (aVal > bVal) {\n        return 1\n      }\n      return 0\n    })\n\n    const guards = {}\n    let chosenGuard = null\n    let currentGuard = null\n    let lastMinute = 0\n\n    // Format input inot the way I chose to use it\n    inputs.forEach(input => {\n      const log = input.split(' ')\n      const dateVal = new Date(log[0].replace('[', ''))\n      const time = log[1].replace(']', '').split(':')\n      const action = log[2]\n      const id = log[3].replace('#', '')\n\n      // If the guard exists, we're dealing with sleeping or waking\n      if (Number.isNaN(parseInt(id))) {\n        const logId = getDate(dateVal)\n\n        // If the guard falls alseep, we just need to keep track of when he fell asleep\n        if (action === 'falls') {\n          lastMinute = time[1]\n        } else {\n          // If the guard wakes up, we use the falls asleep time to update the logs with\n          // his slept minutes as well as updates this guard's total Sleep time\n          for (let i = lastMinute; i < time[1]; i++) {\n            currentGuard.logs[logId][i] = 'x'\n            currentGuard.totalAsleep++\n          }\n          lastMinute = time[1]\n        }\n      } else {\n        // If guard doesn't exist then set up new guard ++ logs\n        if (!guards[id]) {\n          guards[id] = createGuard(id)\n        }\n\n        currentGuard = guards[id]\n\n        // If the time's hour isn't midnight then set up the log for the following day\n        // because we really don't care when the guard starts, just what day his shift is for\n\n        if (time[0] !== '00') {\n          dateVal.setDate(dateVal.getDate() + 1)\n          currentGuard.logs[getDate(dateVal)] = createFreshLog()\n        } else {\n          currentGuard.logs[getDate(dateVal)] = createFreshLog()\n        }\n        lastMinute = 0\n      }\n    })\n\n    // Get guard with most slept minutes\n    for (const key in guards) {\n      const guard = guards[key]\n\n      if (!chosenGuard || guard.totalAsleep > chosenGuard.totalAsleep) {\n        chosenGuard = guard\n      }\n    }\n\n    // Get minute most slept on\n    const mostSleptMinute = getMostSleptMinute(chosenGuard.logs).minute\n\n    return chosenGuard.id * mostSleptMinute\n  },\n  b: inputs => {\n    // The same as part\n    inputs.sort((a, b) => {\n      const alog = a.split(']')\n      const aVal = new Date(alog[0].replace('[', ''))\n      const blog = b.split(']')\n      const bVal = new Date(blog[0].replace('[', ''))\n\n      if (aVal < bVal) {\n        return -1\n      }\n      if (aVal > bVal) {\n        return 1\n      }\n      return 0\n    })\n\n    const guards = {}\n    let chosenGuard = null\n    let currentGuard = null\n    let lastMinute = 0\n\n    inputs.forEach(input => {\n      const log = input.split(' ')\n      const dateVal = new Date(log[0].replace('[', ''))\n      const time = log[1].replace(']', '').split(':')\n      const action = log[2]\n      const id = log[3].replace('#', '')\n\n      if (Number.isNaN(parseInt(id))) {\n        const logId = getDate(dateVal)\n        if (action === 'falls') {\n          lastMinute = time[1]\n        } else {\n          // Track total Sleep time\n          for (let i = lastMinute; i < time[1]; i++) {\n            currentGuard.logs[logId][i] = 'x'\n            currentGuard.totalAsleep++\n          }\n          lastMinute = time[1]\n        }\n      } else {\n        // Set up log\n        if (!guards[id]) {\n          guards[id] = createGuard(id)\n        }\n\n        currentGuard = guards[id]\n\n        if (time[0] !== '00') {\n          dateVal.setDate(dateVal.getDate() + 1)\n          currentGuard.logs[getDate(dateVal)] = createFreshLog()\n        } else {\n          currentGuard.logs[getDate(dateVal)] = createFreshLog()\n        }\n        lastMinute = 0\n      }\n    })\n\n    // Loop through guards and figure out most slept minute and count for each\n    for (const key in guards) {\n      const guard = guards[key]\n      const answer = getMostSleptMinute(guard.logs)\n      guard.mostSleptMinute = answer.minute\n      guard.mostSleptMinuteCount = answer.count\n    }\n\n    // Find guard with most slept minutes\n    for (const key in guards) {\n      const guard = guards[key]\n\n      if (\n        !chosenGuard ||\n        guard.mostSleptMinuteCount > chosenGuard.mostSleptMinuteCount\n      ) {\n        if (guard.mostSleptMinuteCount) {\n          chosenGuard = guard\n        }\n      }\n    }\n\n    return chosenGuard.id * chosenGuard.mostSleptMinute\n  }\n}\n","export default {\n  a: [\n    {\n      input: [\n        `[1518-11-01 00:00] Guard #10 begins shift`,\n        `[1518-11-01 00:05] falls asleep`,\n        `[1518-11-01 00:25] wakes up`,\n        `[1518-11-01 00:30] falls asleep`,\n        `[1518-11-01 00:55] wakes up`,\n        `[1518-11-01 23:58] Guard #99 begins shift`,\n        `[1518-11-02 00:40] falls asleep`,\n        `[1518-11-02 00:50] wakes up`,\n        `[1518-11-03 00:05] Guard #10 begins shift`,\n        `[1518-11-03 00:24] falls asleep`,\n        `[1518-11-03 00:29] wakes up`,\n        `[1518-11-04 00:02] Guard #99 begins shift`,\n        `[1518-11-04 00:36] falls asleep`,\n        `[1518-11-04 00:46] wakes up`,\n        `[1518-11-05 00:03] Guard #99 begins shift`,\n        `[1518-11-05 00:45] falls asleep`,\n        `[1518-11-05 00:55] wakes up`\n      ],\n      expected: 240\n    }\n  ],\n  b: [\n    {\n      input: [\n        `[1518-11-01 00:00] Guard #10 begins shift`,\n        `[1518-11-01 00:05] falls asleep`,\n        `[1518-11-01 00:25] wakes up`,\n        `[1518-11-01 00:30] falls asleep`,\n        `[1518-11-01 00:55] wakes up`,\n        `[1518-11-01 23:58] Guard #99 begins shift`,\n        `[1518-11-02 00:40] falls asleep`,\n        `[1518-11-02 00:50] wakes up`,\n        `[1518-11-03 00:05] Guard #10 begins shift`,\n        `[1518-11-03 00:24] falls asleep`,\n        `[1518-11-03 00:29] wakes up`,\n        `[1518-11-04 00:02] Guard #99 begins shift`,\n        `[1518-11-04 00:36] falls asleep`,\n        `[1518-11-04 00:46] wakes up`,\n        `[1518-11-05 00:03] Guard #99 begins shift`,\n        `[1518-11-05 00:45] falls asleep`,\n        `[1518-11-05 00:55] wakes up`\n      ],\n      expected: 4455\n    }\n  ]\n}\n","import { default as solutions } from './solution'\nimport { default as tests } from './test'\n\nexport default { solutions, tests }\n","const removeReactions = input => {\n  let matchStart = false\n  // Loop through input from the start, if the next letter is the same letter\n  // but opposite case then return the input minus those two indexes\n\n  for (let i = 0; i < input.length - 1 && matchStart === false; i++) {\n    const letter = input[i]\n    const nextLetter = input[i + 1]\n    if (\n      (letter === letter.toLowerCase() &&\n        letter.toUpperCase() === nextLetter) ||\n      (letter === letter.toUpperCase() && letter.toLowerCase() === nextLetter)\n    ) {\n      matchStart = i\n      break\n    }\n  }\n\n  if (matchStart !== false) {\n    return input.slice(0, matchStart).concat(input.slice(matchStart + 2))\n  } else {\n    return input\n  }\n}\n\nexport default {\n  a: inputs => {\n    const input = inputs[0]\n\n    let done = false\n    let splitVals = input.split('')\n\n    // keep removing reactions until there are no more\n    while (!done) {\n      const startCount = splitVals.length\n\n      splitVals = removeReactions(splitVals)\n\n      // No changes - ur done\n      if (startCount === splitVals.length) {\n        done = true\n      }\n    }\n\n    return splitVals.length\n  },\n  b: inputs => {\n    const input = inputs[0]\n\n    let lowest = false\n    // For every letter in the alphabet, remove each case from the original string\n    // Process as above for each, tracking the lowest amount of letters left\n    for (let i = 0; i < 26; i++) {\n      let done = false\n      const letter = (i + 10).toString(36)\n      let splitVals = input\n        .replace(new RegExp(letter, 'g'), '')\n        .replace(new RegExp(letter.toUpperCase(), 'g'), '')\n        .split('')\n\n      while (!done) {\n        const startCount = splitVals.length\n\n        splitVals = removeReactions(splitVals)\n\n        // No changes - ur done\n        if (startCount === splitVals.length) {\n          done = true\n        }\n      }\n\n      if (lowest === false || splitVals.length < lowest) {\n        lowest = splitVals.length\n      }\n    }\n\n    return lowest\n  }\n}\n","export default {\n  a: [\n    { input: [`dabAcCaCBAcCcaDA`], expected: 10 },\n    { input: [`dDbAcCaCBAcCcaDA`], expected: 8 },\n    { input: [`DDbAcCaCBAcCcaDA`], expected: 10 }\n  ],\n  b: [\n    { input: [`dabAcCaCBAcCcaDA`], expected: 4 },\n    { input: [`dDbAcCaCBAcCcaDA`], expected: 8 },\n    { input: [`DDbAcCaCBAcCcaDA`], expected: 10 }\n  ]\n}\n","import { default as solutions } from './solution'\nimport { default as tests } from './test'\n\nexport default { solutions, tests }\n","import { flattenDeep, max, countBy, uniq, maxBy } from 'lodash'\n\nconst calcMan = (x1, x2, y1, y2) => Math.abs(x1 - x2) + Math.abs(y1 - y2)\n\nexport default {\n  a: inputs => {\n    const formattedInput = inputs.map(input => {\n      const vals = input.split(',')\n      return [parseInt(vals[0]), parseInt(vals[1])]\n    })\n\n    // find max size of grid to fill it\n    let maxSize = max(flattenDeep(formattedInput)) + 1\n\n    // create grid\n    const grid = Array(maxSize)\n    for (let i = 0; i < grid.length; i++) {\n      grid[i] = Array(maxSize)\n    }\n\n    // add inputs to grid\n    for (let i = 0; i < formattedInput.length; i++) {\n      const input = formattedInput[i]\n      grid[input[1]][input[0]] = i + 1 + '*'\n    }\n\n    // loop through each grid slot\n    for (let row = 0; row < maxSize; row++) {\n      for (let col = 0; col < maxSize; col++) {\n        // If this isn't an input slot, don't track\n        if (!grid[row][col]) {\n          // track closest in grid slot\n          let closest = maxSize\n          let closestInput = -1\n          // loop through each input and determine closest manhattan distance\n\n          for (let i = 0; i < formattedInput.length; i++) {\n            const man = calcMan(\n              row,\n              formattedInput[i][1],\n              col,\n              formattedInput[i][0]\n            )\n            if (man < closest) {\n              closest = man\n              closestInput = i + 1\n            }\n\n            // if same closeness to multiple - then `.`s\n            else if (man === closest) {\n              closestInput = '.'\n            }\n          }\n          grid[row][col] = closestInput\n        }\n      }\n    }\n\n    // count all occurances of a number in grid\n    const valueCounts = countBy(flattenDeep(grid))\n\n    // get values on outside of grid (they'll be infinite)\n    const outerVals = []\n    for (let col = 0; col < maxSize; col++) {\n      outerVals.push(grid[0][col])\n    }\n    for (let col = 0; col < maxSize; col++) {\n      outerVals.push(grid[maxSize - 1][col])\n    }\n    for (let row = 0; row < maxSize; row++) {\n      outerVals.push(grid[row][0])\n    }\n    for (let row = 0; row < maxSize; row++) {\n      outerVals.push(grid[row][maxSize - 1])\n    }\n\n    const cleanOuterVals = uniq(outerVals)\n    const cleanOuterValsObject = {}\n\n    for (let i = 0; i < cleanOuterVals.length; i++) {\n      cleanOuterValsObject[cleanOuterVals[i]] = 0\n    }\n\n    const cleanedVals = {}\n    // console.log(valueCounts)\n\n    // remove outerVals from value counts\n    for (const key in valueCounts) {\n      if (valueCounts.hasOwnProperty(key)) {\n        const element = valueCounts[key]\n        if (cleanOuterValsObject[key] === undefined) {\n          cleanedVals[key] = element\n        }\n      }\n    }\n\n    const maxVal = maxBy(Object.keys(cleanedVals), o => cleanedVals[o])\n\n    return cleanedVals[maxVal] + 1\n  },\n  b: inputs => {\n    let maxDistance = 0\n    const formattedInput = inputs.map(input => {\n      const vals = input.split(',')\n      return [parseInt(vals[0]), parseInt(vals[1])]\n    })\n\n    if (formattedInput.length === 6) {\n      maxDistance = 32\n    } else {\n      maxDistance = 10000\n    }\n\n    // find max size of grid to fill it\n    let maxSize = max(flattenDeep(formattedInput)) + 1\n\n    // create grid\n    const grid = Array(maxSize)\n    for (let i = 0; i < grid.length; i++) {\n      grid[i] = Array(maxSize)\n    }\n\n    // add inputs to grid\n    for (let i = 0; i < formattedInput.length; i++) {\n      const input = formattedInput[i]\n      grid[input[1]][input[0]] = i + 1 + '*'\n    }\n\n    // loop through each grid slot\n    for (let row = 0; row < maxSize; row++) {\n      for (let col = 0; col < maxSize; col++) {\n        // If this isn't an input slot, don't track\n        // track closest in grid slot\n        let totalMan = 0\n        let closestInput = -1\n        // loop through each input and track manhattan distance\n        for (let i = 0; i < formattedInput.length; i++) {\n          const man = calcMan(\n            row,\n            formattedInput[i][1],\n            col,\n            formattedInput[i][0]\n          )\n          totalMan += man\n        }\n\n        // If value is less than target then hashtag it #blessed\n        if (totalMan < maxDistance) {\n          grid[row][col] = '#'\n        } else {\n          grid[row][col] = '.'\n        }\n      }\n    }\n\n    // count all occurances of '#'\n    return countBy(flattenDeep(grid))['#']\n  }\n}\n","export default {\n  a: [\n    { input: [`1, 1`, `1, 6`, `8, 3`, `3, 4`, `5, 5`, `8, 9`], expected: 17 }\n  ],\n  b: [{ input: [`1, 1`, `1, 6`, `8, 3`, `3, 4`, `5, 5`, `8, 9`], expected: 16 }]\n}\n","import { default as solutions } from './solution'\nimport { default as tests } from './test'\n\nexport default { solutions, tests }\n","export { default as day1 } from './day1'\nexport { default as day2 } from './day2'\nexport { default as day3 } from './day3'\nexport { default as day4 } from './day4'\nexport { default as day5 } from './day5'\nexport { default as day6 } from './day6'\n","import { readFile } from './utils/readFile'\nimport * as days from './days'\n\nconst day = process.argv[2]\nconst part = process.argv[3]\nconst command = process.argv[4]\nconst dayCode = days[day]\n\nconsole.log(`Running ${day} ${part} ${command}`)\n\nif (command === 'test') {\n  dayCode.tests[part].forEach((test, index) => {\n    let errMessage = ''\n    const result = dayCode.solutions[part](test.input)\n    const expected = test.expected\n    const pass = result === expected\n    if (!pass) {\n      errMessage = `Expected: ${expected} Got: ${result}`\n    }\n\n    console.log(`Test ${index + 1}: ${pass ? 'Pass!' : 'Fail!'} ${errMessage}`)\n  })\n} else if (command === 'process') {\n  const solution = dayCode.solutions[part]\n  const result = solution(readFile(day))\n\n  console.log(`Answer: ${result}`)\n}\n"]}